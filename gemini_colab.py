# -*- coding: utf-8 -*-
"""Gemini_colab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iApPjCoLgG_yWScZX-4DE5xDbWNVDRFd

##### Copyright 2024 Google LLC.
"""

#@title Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""# Gemini API Python quickstart

<table class="tfo-notebook-buttons" align="left">
  <td>
    <a target="_blank" href="https://ai.google.dev/tutorials/quickstart_colab"><img src="https://ai.google.dev/static/site-assets/images/docs/notebook-site-button.png" height="32" width="32" />View on Google AI</a>
  </td>
  <td>
    <a target="_blank" href="https://colab.research.google.com/github/google/generative-ai-docs/blob/main/site/en/tutorials/quickstart_colab.ipynb"><img src="https://www.tensorflow.org/images/colab_logo_32px.png" />Run in Google Colab</a>
  </td>
  <td>
    <a target="_blank" href="https://github.com/google/generative-ai-docs/blob/main/site/en/tutorials/quickstart_colab.ipynb"><img src="https://www.tensorflow.org/images/GitHub-Mark-32px.png" />View source on GitHub</a>
  </td>
</table>

This tutorial shows you how to get started with the Gemini API using the Python SDK.

## Prerequisites

You can run this tutorial in Google Colab, which doesn't require additional environment configuration.

Alternatively, to complete this quickstart locally, see the Python guidance in [Get started with the Gemini API](https://ai.google.dev/tutorials/quickstart).

## Install the SDK

The Python SDK for the Gemini API is contained in the [`google-generativeai`](https://pypi.org/project/google-generativeai/) package. Install the dependency using pip:
"""

!pip install -q -U google-generativeai

###3 import neccessary library
import pathlib
import textwrap
import google.generativeai as genai
# A utility to securely store your API key
from google.colab import userdata
from IPython.display import display
from IPython.display import Markdown

def to_markdown(text):
  text = text.replace('â€¢', ' *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

"""## Set up your API key

To use the Gemini API, you'll need an API key. If you don't already have one, create a key in Google AI Studio.

<a class="button" href="https://aistudio.google.com/app/apikey" target="_blank" rel="noopener noreferrer">Get an API key</a>

In Colab, add the key to the secrets manager under the "ðŸ”‘" in the left panel. Give it the name `GOOGLE_API_KEY`. Then pass the key to the SDK:
"""

# Import the Python SDK
import google.generativeai as genai
# Used to securely store your API key
from google.colab import userdata

GOOGLE_API_KEY=userdata.get('GOOGLE_API_KEY')
genai.configure(api_key=GOOGLE_API_KEY)

"""## Initialize the Generative Model

Before you can make any API calls, you need to initialize the Generative Model.
"""

model = genai.GenerativeModel('gemini-pro')

"""## Generate text
Text Generation from Text Inputs
Letâ€™s begin by experimenting with generating text from simple text prompts.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# response = model.generate_content("can you provide the impact of machine learning on healthcare industry?")
#

to_markdown(response.text)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# response = model.generate_content("can you tell me more about global financial dataset and how machine learning can help study the data and what machine learning algorithms can be used?")
#

to_markdown(response.text)

"""# GENERATE TEXT FROM IMAGES AND TEXT FROM INPUTS

gemini provides a multimodal model(gemini-pro-vision) that accepts both texts and imagesThe Generative.generate_content API is designed to handle multimodal propmpts and return a text ouput .
"""

from google.colab import drive
drive.mount('/content/drive')

import PIL.Image
img=PIL.Image.open('/content/animals.jpg')
img

"""Now let's use gemini-pro-vision model and pass the image with generate content"""

model=genai.GenerativeModel('gemini-pro-vision')

response=model.generate_content(img)
to_markdown(response.text)

import PIL.Image
img=PIL.Image.open('/content/Climate-change_11-15-16.jpg')
img

model=genai.GenerativeModel('gemini-pro-vision')

response=model.generate_content(img)
to_markdown(response.text)

"""Now lets prompt the images to provide and text related to the description of images"""

response=model.generate_content(["Write an engaging blog post on climate change based on the photo. it should include a description of the photo.",img],stream=True)
response.resolve()
to_markdown(response.text)

"""# Conversational Chat
Gemini can engage in multi-turn conversations, enabling users to have freeform discussions with the model.
"""

model = genai.GenerativeModel('gemini-pro')
chat = model.start_chat(history=[])
chat

#### lets initiate conversation by sending one sentence
response = chat.send_message("Explain why inflation is so high when econmy is doing good.")
to_markdown(response.text)

"""## What's next

To learn more about working with the Gemini API, see the [Python tutorial](https://ai.google.dev/tutorials/python_quickstart).

If you're new to generative AI models, you might want to look at the
[concepts guide](https://ai.google.dev/docs/concepts) and the
[Gemini API overview](https://ai.google.dev/docs/gemini_api_overview).
"""